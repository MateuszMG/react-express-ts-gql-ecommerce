# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AccessToken {
  accessToken: String!
}

input AddRatingInput {
  comment: String!
  productId: String!
  rating: Float!
}

type Basket {
  productId: String!
  quantity: Float!
}

type Category {
  _id: String!
  category: String!
}

input CategoryInput {
  category: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DecodedUser {
  _id: String!
  email: String!
  roles: [String!]!
  username: String!
}

type DeliveryAdress {
  address: String!
  city: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  postCode: String!
  state: String!
}

input DeliveryAdressInput {
  address: String!
  city: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  postCode: String!
  state: String!
}

type Distinction {
  active: Boolean!
  endTime: DateTime!
  startTime: DateTime!
}

input EditCategoryInput {
  _id: String!
  category: String!
}

input EditProductInput {
  _id: String!
  active: Boolean!
  category: String!
  description: String!
  distinction: ProductDistinctionInput!
  image: String!
  model: String!
  price: ProductPriceInput!
  quantity: Float!
  ratings: ProductRatingsInput!
  sale: ProductSaleInput!
  size: ProductSizeInput!
  solds: ProductSoldsInput!
  subtitle: String!
  title: String!
  views: ProductViewsInput!
}

input EditRatingInput {
  _id: String!
  comment: String!
  rating: Float!
}

input GetRatingsInput {
  productId: String!
}

"""Without response"""
scalar GraphQLVoid

input IdInput {
  _id: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addCategory(input: CategoryInput!): Category!
  addProduct(input: ProductInput!): Product!
  addRating(input: AddRatingInput!): Rating!
  addToBasket(input: IdInput!): UserBasket!
  addView(input: IdInput!): GraphQLVoid
  changeActiveProduct(input: IdInput!): ResMessage!
  createPayment: ResId!
  deleteCategory(input: IdInput!): ResMessage!
  deleteProduct(input: IdInput!): ResMessage!
  deleteRating(input: IdInput!): ResMessage!
  editCategory(input: EditCategoryInput!): ResMessage!
  editProduct(input: EditProductInput!): ResMessage!
  editRating(input: EditRatingInput!): Rating!
  login(input: LoginInput!): AccessToken!
  register(input: RegisterInput!): AccessToken!
  removeFromBasket(input: IdInput!): UserBasket!
  savePayment: ResMessage!
  setDeliveryAdress(input: DeliveryAdressInput!): DeliveryAdress!
}

type Price {
  retail: Float!
  wholesale: Float!
}

type Product {
  _id: String!
  active: Boolean!
  category: String!
  description: String!
  distinction: Distinction!
  image: String!
  model: String!
  price: Price!
  quantity: Float!
  ratings: Ratings!
  sale: Sale!
  size: Size!
  solds: Solds!
  subtitle: String!
  title: String!
  views: Views!
}

input ProductDistinctionInput {
  active: Boolean!
  endTime: DateTime!
  startTime: DateTime!
}

type ProductForGuest {
  _id: String!
  category: String!
  description: String!
  distinction: Distinction!
  image: String!
  model: String!
  price: Float!
  quantity: Float!
  ratings: RatingsForGuest!
  sale: Sale!
  size: Size!
  solds: Float!
  subtitle: String!
  title: String!
  views: Float!
}

type ProductInUserBasket {
  description: String!
  discountTotal: Float!
  distinction: Distinction!
  image: String!
  percentageDiscount: Float!
  price: Float!
  priceTotal: Float!
  productId: String!
  quantity: Float!
  quantityTotal: Float!
  ratings: RatingsForGuest!
  sale: Sale!
  solds: Float!
  title: String!
  views: Float!
}

input ProductInput {
  active: Boolean!
  category: String!
  description: String!
  distinction: ProductDistinctionInput!
  image: String!
  model: String!
  price: ProductPriceInput!
  quantity: Float!
  ratings: ProductRatingsInput!
  sale: ProductSaleInput!
  size: ProductSizeInput!
  solds: ProductSoldsInput!
  subtitle: String!
  title: String!
  views: ProductViewsInput!
}

input ProductPriceInput {
  retail: Float!
  wholesale: Float!
}

input ProductRatingsInput {
  activeFake: Boolean!
  fakeAmount: Float!
  fakeTotal: Float!
}

input ProductSaleInput {
  active: Boolean!
  endTime: DateTime!
  priceAfterSale: Float!
  priceBeforeSale: Float!
  startTime: DateTime!
}

input ProductSizeInput {
  height: Float!
  length: Float!
  weight: Float!
  width: Float!
}

input ProductSoldsInput {
  activeFake: Boolean!
  fakeTotal: Float!
}

input ProductViewsInput {
  activeFake: Boolean!
  fakeTotal: Float!
}

type PurchaseHistory {
  date: DateTime!
  discountTotal: Float!
  percentageDiscount: Float!
  priceTotal: Float!
  productsIds: [String!]!
  quantityTotal: Float!
  soldsIds: [String!]!
}

type Query {
  getBasket: UserBasket!
  getCategories: [Category!]!
  getHighlightedProduct: Product!
  getProduct(input: IdInput!): Product!
  getProductForGuest(input: IdInput!): ProductForGuest!
  getProducts: [Product!]!
  getProductsForGuest: [ProductForGuest!]!
  getRatings(input: GetRatingsInput!): [Rating!]!
  getUser: User!
  logout: ResMessage!
  profile: DecodedUser!
}

type Rating {
  _id: String!
  comment: String!
  createdAt: DateTime!
  productId: String!
  rating: Float!
  updatedAt: DateTime!
  userId: String!
  username: String!
}

type Ratings {
  activeFake: Boolean!
  fakeAmount: Float!
  fakeTotal: Float!
  originalAmount: Float!
  originalAndFakeAmount: Float!
  originalAndFakeTotal: Float!
  originalTotal: Float!
}

type RatingsForGuest {
  amount: Float!
  total: Float!
}

input RegisterInput {
  confirmPassword: String!
  email: String!
  password: String!
  username: String!
}

type ResId {
  _id: String!
}

type ResMessage {
  message: String!
}

type Sale {
  active: Boolean!
  endTime: DateTime!
  percentageDiscount: Float!
  priceAfterSale: Float!
  priceBeforeSale: Float!
  startTime: DateTime!
}

type Size {
  height: Float!
  length: Float!
  weight: Float!
  width: Float!
}

type Solds {
  activeFake: Boolean!
  fakeTotal: Float!
  originalAndFakeTotal: Float!
  originalTotal: Float!
}

type Subscription {
  highlightedProductUpdated: Product!
}

type User {
  _id: String!
  accessToken: String!
  basket: Basket!
  createdAt: DateTime!
  deliveryAdress: DeliveryAdress!
  email: String!
  purchaseHistory: [PurchaseHistory!]!
  refreshToken: String!
  roles: [String!]!
  updatedAt: DateTime!
  username: String!
}

type UserBasket {
  discountTotal: Float!
  percentageDiscount: Float!
  priceTotal: Float!
  products: [ProductInUserBasket!]!
  quantityTotal: Float!
}

type Views {
  activeFake: Boolean!
  fakeTotal: Float!
  originalAndFakeTotal: Float!
  originalTotal: Float!
  originalTotalViewsWithoutDuplicateIPAddresses: Float!
}